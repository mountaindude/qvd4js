name: Multi-Platform Test Suite

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js version to test (optional - runs all by default)'
        required: false
        type: choice
        options:
          - 'all'
          - '20.x'
          - '22.x'
          - '24.x'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 3

  test:
    name: Test - ${{ matrix.platform }} - Node ${{ matrix.node }}
    needs: build
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
      deployments: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux - GitHub-hosted runners
          - platform: Linux
            runner: ubuntu-22.04
            node: '20.x'
          - platform: Linux
            runner: ubuntu-22.04
            node: '22.x'
          - platform: Linux
            runner: ubuntu-22.04
            node: '24.x'

          # Windows - Self-hosted runners
          - platform: Windows
            runner: [self-hosted, windows, x64]
            node: '20.x'
          - platform: Windows
            runner: [self-hosted, windows, x64]
            node: '22.x'
          - platform: Windows
            runner: [self-hosted, windows, x64]
            node: '24.x'

          # macOS Intel - Self-hosted runners
          - platform: macOS-Intel
            runner: [self-hosted, macos, x64]
            node: '20.x'
          - platform: macOS-Intel
            runner: [self-hosted, macos, x64]
            node: '22.x'
          - platform: macOS-Intel
            runner: [self-hosted, macos, x64]
            node: '24.x'

          # macOS Apple Silicon - Self-hosted runners
          - platform: macOS-ARM
            runner: [self-hosted, macos, arm64]
            node: '20.x'
          - platform: macOS-ARM
            runner: [self-hosted, macos, arm64]
            node: '22.x'
          - platform: macOS-ARM
            runner: [self-hosted, macos, arm64]
            node: '24.x'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Display system information (Windows)
        if: runner.os == 'Windows'
        # Assumes PowerShell is the default shell on Windows self-hosted runners.
        # If PowerShell Core is used, use 'pwsh' instead of 'powershell'.
        shell: powershell
        run: |
          "### System Information" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "- **Platform**: ${{ matrix.platform }}" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "- **Runner**: ${{ runner.name }}" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "- **Node.js**: $(node --version)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "- **npm**: $(npm --version)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "- **OS**: Windows" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "- **Architecture**: x64" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

      - name: Display system information (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "### System Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ${{ runner.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **npm**: $(npm --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: $(uname -s)" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: $(uname -m)" >> $GITHUB_STEP_SUMMARY

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests with coverage
        run: npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/coverage-final.json
          flags: ${{ matrix.platform }}-node${{ matrix.node }}
          name: codecov-${{ matrix.platform }}-node${{ matrix.node }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.platform }}-node${{ matrix.node }}
          path: |
            coverage/
            test-results/
          retention-days: 30

      - name: Run benchmarks
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: npm run bench:ci

      - name: Store benchmark results to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          # Name of the benchmark - must be unique for each platform/node combination
          name: 'qvd4js Benchmark - ${{ matrix.platform }} - Node ${{ matrix.node }}'
          # Tool type - customBiggerIsBetter for ops/sec (higher is better)
          tool: 'customBiggerIsBetter'
          # Path to the benchmark output file
          output-file-path: benchmark-results.json
          # GitHub API token for pushing to gh-pages
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Automatically push results to gh-pages branch
          auto-push: true
          # Alert when performance degrades by more than 150%
          alert-threshold: '150%'
          # Post a comment on the commit when alert is triggered
          comment-on-alert: true
          # Don't fail the workflow on performance regression
          fail-on-alert: false
          # Always show benchmark summary in job output
          summary-always: true
          # Target branch for GitHub Pages
          gh-pages-branch: gh-pages
          # Directory path where benchmark data will be stored (unique per platform/node)
          benchmark-data-dir-path: 'benchmarks/${{ matrix.platform }}-node${{ matrix.node }}'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  summary:
    name: Test Summary
    runs-on: ubuntu-22.04
    needs: [lint, build, test, security-scan]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
